Git is version control system for tracking and managing changes to code
    Track changes
    swap versions
    undo changes


Git tracks changes through 3 stages:
working directory -> all the files in local repo in current state. none of the changes in wording directory are tracked by git
index -> to track changes in files, we need to add files to index. This is called staging.
        This tells git we want to track all the changes we made in WD Command: git add 
head -> to add changes to official version, we need to tell git to commit these changes from staging area(index)
        this tells git the changes are final and requires a message to be saved with the commit
        Command git commit
        head is most recently commited version of your code
        after commiting changes to head, they are saved as version on pc, but not on remote repo on github
            to get changes to remote repo on github we need to use command: git push
                Copy SSH from github in remote repo for cloning
                command: git remote origin 'enter SSH_url from Gh'
                Now you can use git push to push to remote repo on Gh

Pulling-> git pull 
    all changes from github will be pulled onto person pc and merge with any changes you have

Branches:
    copy of code at a point in time which has its own history seperate from the main branch(master)--
    command: git checkout -b <new branchname> creates a new branch and switches to that branch
    command: git merge <branch to merge> merges all changes from branch to current branch you have checkout (the one you are in)
             


//--------------------------------------------------------------------------------------
To initialize Git in a project that already exists on your pc
Respository is a containers for git 
To use Git on a file or project -> you need to instialize a repo -> git init  
this created a .git folder

    command: git log -> gives history of commits 

git status -> check status of repo like untracked files
"working tree clean" means no changes that havent been comitted

Staging files: add untracked files to staging area
command: git add filename

Add all changes into staging area:
command: git add .

group staging(multiple files):
command: git add file 1 file 2

Then commit
command: git commit -m "description of commit in quotes"
    this includes a message explaining what you are committing

Going back on commit (reverting back to prev code):
copy the desired commit hash
    command: git checkout 'enter hash'
when you go back to look at old code, you are taken off the current branch and put on 'Detached Head'
Branches:
    branch is a timeline. Its like making a seperate place to try things wihtout affecting the main branch
    To create a new branch:
    command: git branch <new branch name>

    main branch by default is called master

    this list branches
    command: git branch 

    navigate to branch:
    command: git checkout master


    to merge to a branch to current branch you are in
    command: git merge branchname


//=============================================

RESOURCES:::

https://www.datree.io/resources/git-error-fatal-remote-origin-already-exists


Ssh issue -> Resource: https://github.com/jakubroztocil/cloudtunes/issues/46
git remote rm origin // for removing the existing connection
git remote add origin https://github.com/BernieTheBear/ig-scraper-test.git
git push -u origin master
